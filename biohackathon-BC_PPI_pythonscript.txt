```python
import os
import pandas as pd
import requests
from tqdm import tqdm
import time
import json
from tqdm import tqdm
```


```python
import os
import json
import time
import requests
import pandas as pd
from tqdm import tqdm

def safe_str(value):
    """Convert value to string, handling potential float values."""
    if isinstance(value, float):
        return f"{value:.6f}"  # Convert float to string with 6 decimal places
    return str(value)

def uniprot_ids_to_gene_names(uniprot_ids, max_retries=3, cache_file="uniprot_cache.json"):
    # Load cache if it exists
    if os.path.exists(cache_file):
        with open(cache_file, 'r') as f:
            cache = json.load(f)
    else:
        cache = {}

    # Filter out IDs that are already in the cache
    ids_to_fetch = [id for id in uniprot_ids if id not in cache]

    if ids_to_fetch:
        url = "https://rest.uniprot.org/uniprotkb/search"
        params = {
            "query": " OR ".join(f"accession:{id}" for id in ids_to_fetch),
            "fields": "accession,gene_names",
            "format": "json"
        }
        
        for attempt in range(max_retries):
            try:
                response = requests.get(url, params=params)
                if response.status_code == 200:
                    data = response.json()
                    for result in data.get('results', []):
                        acc = result['primaryAccession']
                        genes = result.get('genes', [])
                        gene_name = genes[0]['geneName']['value'] if genes else acc
                        cache[acc] = gene_name
                    break
                else:
                    print(f"Error: Unable to fetch data. Status code: {response.status_code}")
                    print(f"Response content: {response.text}")
            except Exception as e:
                print(f"Error during API request: {str(e)}")
            
            if attempt < max_retries - 1:
                print(f"Retrying in 5 seconds... (Attempt {attempt + 1}/{max_retries})")
                time.sleep(5)
        
        # Save updated cache
        with open(cache_file, 'w') as f:
            json.dump(cache, f)

    # Return mappings for all requested IDs
    return {id: cache.get(id, id) for id in uniprot_ids}

def fallback_gene_name_conversion(uniprot_ids):
    # This is a placeholder for a fallback method
    # You could implement a local mapping file or use another API here
    print("Using fallback gene name conversion method")
    # For demonstration, we'll just return the UniProt IDs as gene names
    return {id: id for id in uniprot_ids}

def check_file_content(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            first_few_lines = [next(file) for _ in range(5)]
        
        if not first_few_lines:
            return "File is empty"
        
        # Check if the file seems to be in MITAB format
        if all('\t' in line for line in first_few_lines):
            return "File appears to be in MITAB format"
        else:
            return "File does not appear to be in MITAB format"
    except UnicodeDecodeError:
        return "File encoding issues - try different encoding"
    except Exception as e:
        return f"Error reading file: {str(e)}"

def process_mitab_file(file_path, seed_gene):
    print(f"Reading MITAB file for {seed_gene}...")

    # Check file content before processing
    content_check = check_file_content(file_path)
    print(f"File check result: {content_check}")
    
    if content_check == "File is empty":
        print(f"Warning: File for {seed_gene} is empty")
        return []
    
    if content_check != "File appears to be in MITAB format":
        print(f"Warning: File for {seed_gene} may not be in MITAB format")
        return []
    
    try:
        # Try reading the file with different encodings
        for encoding in ['utf-8', 'iso-8859-1', 'utf-16']:
            try:
                df = pd.read_csv(file_path, sep='\t', header=None, usecols=[0, 1], names=['interactor_a', 'interactor_b'], encoding=encoding)
                break
            except UnicodeDecodeError:
                continue
        else:
            raise ValueError("Unable to read file with any encoding")
        
        # Extract UniProtKB IDs
        df['interactor_a'] = df['interactor_a'].str.extract(r'uniprotkb:(\w+)')
        df['interactor_b'] = df['interactor_b'].str.extract(r'uniprotkb:(\w+)')
        
        print("Converting UniProtKB IDs to gene names...")
        unique_ids = set(df['interactor_a'].dropna().tolist() + df['interactor_b'].dropna().tolist())
        
        # Batch process UniProtKB IDs
        batch_size = 100
        id_to_gene_map = {}
        for i in tqdm(range(0, len(unique_ids), batch_size), desc="Batch processing"):
            batch = list(unique_ids)[i:i+batch_size]
            id_to_gene_map.update(uniprot_ids_to_gene_names(batch))
        
        # Debugging: Print a few entries from id_to_gene_map
        print("Sample of id_to_gene_map:")
        for i, (key, value) in enumerate(id_to_gene_map.items()):
            print(f"{key}: {value}")
            if i >= 5:  # Print only the first 5 entries
                break

        # Debugging: Check if seed_gene is in the map values
        if seed_gene in id_to_gene_map.values():
            print(f"{seed_gene} found in id_to_gene_map values")
        else:
            print(f"Warning: {seed_gene} not found in id_to_gene_map values")
            # Try to find the UniProt ID for the seed gene
            seed_gene_id = df[df['interactor_a'] == seed_gene]['interactor_a'].iloc[0] if not df[df['interactor_a'] == seed_gene].empty else None
            if seed_gene_id is None:
                seed_gene_id = df[df['interactor_b'] == seed_gene]['interactor_b'].iloc[0] if not df[df['interactor_b'] == seed_gene].empty else None
            
            if seed_gene_id:
                print(f"Found UniProt ID for {seed_gene}: {seed_gene_id}")
                id_to_gene_map[seed_gene_id] = seed_gene
            else:
                print(f"Error: Could not find UniProt ID for {seed_gene}")
        
        df['gene_a'] = df['interactor_a'].map(id_to_gene_map)
        df['gene_b'] = df['interactor_b'].map(id_to_gene_map)
        
        # Filter interactions involving the seed gene
        seed_interactions = df[(df['gene_a'] == seed_gene) | (df['gene_b'] == seed_gene)]
        
        print(f"Number of interactions involving {seed_gene}: {len(seed_interactions)}")
        
        if len(seed_interactions) == 0:
            print(f"Warning: No interactions found for seed gene {seed_gene}")
            return []
        
        # Get unique interacting genes
        interacting_genes = set(seed_interactions['gene_a'].tolist() + seed_interactions['gene_b'].tolist())
        
        if seed_gene in interacting_genes:
            interacting_genes.remove(seed_gene)
        else:
            print(f"Warning: Seed gene {seed_gene} not found in the set of interacting genes")
        
        return list(interacting_genes)

    except Exception as e:
        print(f"Error processing file for {seed_gene}: {str(e)}")
        return []

def process_all_mitab_files(directory):
    all_results = {}
    
    # Get list of all MITAB files
    mitab_files = [f for f in os.listdir(directory) if f.endswith(".txt")]
    
    for filename in tqdm(mitab_files, desc="Processing files"):
        file_path = os.path.join(directory, filename)
        
        # Extract seed gene name from filename (assuming filename format is "YYYY-MM-DD-HH_GENENAME.txt")
        seed_gene = filename.split('_')[-1].split('.')[0]
        
        print(f"\nProcessing file: {filename}")
        gene_pairs = process_mitab_file(file_path, seed_gene)
        all_results[seed_gene] = gene_pairs
        print(f"Found {len(gene_pairs)} interacting genes for {seed_gene}")
    
    return all_results

# Example usage
def main():
    directory_path = os.path.expanduser("~/Desktop/myfiles/Biohackathon-BC")
    seed_genes = ['BRCA2', 'BARD1', 'CDH1', 'KRAS', 'ESR1', 'RAD51']

    print("Starting to process all MITAB files...")
    gene_pairs = process_all_mitab_files(directory_path)

    print("\nProcessing complete. Results:")
    for seed_gene, interacting_genes in gene_pairs.items():
        print(f"{seed_gene}: {len(interacting_genes)} interacting genes")

    # Optional: Save results to a file
    with open("Intact_BC_seed_gene_interactionsRESULTSv2.csv", "w") as f:
        for seed_gene, interacting_genes in gene_pairs.items():
            interacting_genes_str = [safe_str(gene) for gene in interacting_genes]
            f.write(f"{seed_gene}: {', '.join(interacting_genes_str)}\n")
    print("Results saved to Intact_BC_seed_gene_interactionsRESULTSv2.csv")

if __name__ == "__main__":
    main()
```

    Starting to process all MITAB files...


    Processing files:   0%|          | 0/6 [00:00<?, ?it/s]

    
    Processing file: 2024-12-08-23-30_BRCA2.txt
    Reading MITAB file for BRCA2...
    File check result: File appears to be in MITAB format
    Converting UniProtKB IDs to gene names...


    
    Batch processing:   0%|          | 0/6 [00:00<?, ?it/s][A
    Batch processing:  17%|█▋        | 1/6 [00:00<00:04,  1.01it/s][A
    Batch processing:  33%|███▎      | 2/6 [00:01<00:03,  1.01it/s][A
    Batch processing:  50%|█████     | 3/6 [00:02<00:02,  1.04it/s][A
    Batch processing:  67%|██████▋   | 4/6 [00:03<00:01,  1.05it/s][A
    Batch processing: 100%|██████████| 6/6 [00:04<00:00,  1.27it/s][A
    Processing files:  17%|█▋        | 1/6 [00:04<00:23,  4.78s/it]

    Sample of id_to_gene_map:
    P29375: KDM5A
    Q3SY00: TSGA10IP
    P57682: KLF3
    B4URF7: PB2
    P82970: HMGN5
    Q8WY54: PPM1E
    BRCA2 found in id_to_gene_map values
    Number of interactions involving BRCA2: 316
    Found 95 interacting genes for BRCA2
    
    Processing file: 2024-12-08-23-33_BARD1.txt
    Reading MITAB file for BARD1...
    File check result: File appears to be in MITAB format
    Converting UniProtKB IDs to gene names...


    
    Batch processing: 100%|██████████| 1/1 [00:00<00:00, 853.54it/s]


    Sample of id_to_gene_map:
    O14776: TCERG1
    Q96PX6: CCDC85A
    Q16778: H2BC21
    P68431: H3C1
    Q9Y2X7: GIT1
    Q15047: SETDB1
    BARD1 found in id_to_gene_map values
    Number of interactions involving BARD1: 177
    Found 64 interacting genes for BARD1
    
    Processing file: 2024-12-09-00-53_KRAS.txt
    Reading MITAB file for KRAS...
    File check result: File appears to be in MITAB format
    Converting UniProtKB IDs to gene names...


    
    Batch processing:   0%|          | 0/13 [00:00<?, ?it/s][A
    Batch processing:   8%|▊         | 1/13 [00:01<00:12,  1.05s/it][A
    Batch processing:  15%|█▌        | 2/13 [00:02<00:11,  1.02s/it][A
    Batch processing:  23%|██▎       | 3/13 [00:03<00:10,  1.00s/it][A
    Batch processing:  31%|███       | 4/13 [00:04<00:08,  1.00it/s][A
    Batch processing:  38%|███▊      | 5/13 [00:04<00:07,  1.04it/s][A
    Batch processing:  46%|████▌     | 6/13 [00:05<00:06,  1.00it/s][A
    Batch processing:  54%|█████▍    | 7/13 [00:06<00:05,  1.02it/s][A
    Batch processing:  62%|██████▏   | 8/13 [00:07<00:05,  1.00s/it][A
    Batch processing:  69%|██████▉   | 9/13 [00:08<00:03,  1.02it/s][A
    Batch processing:  77%|███████▋  | 10/13 [00:09<00:02,  1.02it/s][A
    Batch processing:  85%|████████▍ | 11/13 [00:10<00:01,  1.02it/s][A
    Batch processing:  92%|█████████▏| 12/13 [00:11<00:00,  1.02it/s][A
    Batch processing: 100%|██████████| 13/13 [00:12<00:00,  1.01it/s][A
    Processing files:  50%|█████     | 3/6 [00:17<00:18,  6.07s/it]

    Sample of id_to_gene_map:
    Q12980: NPRL3
    Q6P9B6: MEAK7
    Q3LI66: KRTAP6-2
    B4DX44: B4DX44
    P02792: FTL
    Q9UK12: Q9UK12
    KRAS found in id_to_gene_map values
    Number of interactions involving KRAS: 502
    Found 458 interacting genes for KRAS
    
    Processing file: 2024-12-09-00-54_CDH1.txt
    Reading MITAB file for CDH1...
    File check result: File appears to be in MITAB format
    Converting UniProtKB IDs to gene names...


    
    Batch processing:   0%|          | 0/8 [00:00<?, ?it/s][A
    Batch processing:  12%|█▎        | 1/8 [00:01<00:07,  1.00s/it][A
    Batch processing:  25%|██▌       | 2/8 [00:02<00:06,  1.02s/it][A
    Batch processing:  38%|███▊      | 3/8 [00:02<00:04,  1.02it/s][A

    Error during API request: 'geneName'
    Retrying in 5 seconds... (Attempt 1/3)
    Error during API request: 'geneName'
    Retrying in 5 seconds... (Attempt 2/3)


    
    Batch processing:  50%|█████     | 4/8 [00:14<00:21,  5.27s/it][A

    Error during API request: 'geneName'
    Error during API request: 'geneName'
    Retrying in 5 seconds... (Attempt 1/3)
    Error during API request: 'geneName'
    Retrying in 5 seconds... (Attempt 2/3)


    
    Batch processing:  62%|██████▎   | 5/8 [00:26<00:23,  7.67s/it][A

    Error during API request: 'geneName'


    
    Batch processing:  75%|███████▌  | 6/8 [00:27<00:10,  5.41s/it][A
    Batch processing: 100%|██████████| 8/8 [00:28<00:00,  3.61s/it][A
    Processing files:  67%|██████▋   | 4/6 [00:46<00:27, 13.97s/it]

    Sample of id_to_gene_map:
    Q7Z3T8: ZFYVE16
    Q13442: PDAP1
    Q15019: SEPTIN2
    P07476: IVL
    Q7Z478: DHX29
    Q9BQ29: Q9BQ29
    CDH1 found in id_to_gene_map values
    Number of interactions involving CDH1: 607
    Found 553 interacting genes for CDH1
    
    Processing file: 2024-12-09-01-06_ESR1.txt
    Reading MITAB file for ESR1...
    File check result: File appears to be in MITAB format
    Converting UniProtKB IDs to gene names...


    
    Batch processing:   0%|          | 0/2 [00:00<?, ?it/s][A
    Batch processing:  50%|█████     | 1/2 [00:01<00:01,  1.15s/it][A
    Batch processing: 100%|██████████| 2/2 [00:02<00:00,  1.12s/it][A
    Processing files:  83%|████████▎ | 5/6 [00:48<00:10, 10.10s/it]

    Sample of id_to_gene_map:
    P04406: GAPDH
    Q9NQZ2: UTP3
    Q12906: ILF3
    Q7Z406: Q7Z406
    P06576: ATP5F1B
    Q14669: TRIP12
    ESR1 found in id_to_gene_map values
    Number of interactions involving ESR1: 260
    Found 184 interacting genes for ESR1
    
    Processing file: 2024-12-09-01-07_RAD51.txt
    Reading MITAB file for RAD51...
    File check result: File appears to be in MITAB format
    Converting UniProtKB IDs to gene names...


    
    Batch processing:   0%|          | 0/3 [00:00<?, ?it/s][A
    Batch processing:  33%|███▎      | 1/3 [00:01<00:02,  1.25s/it][A
    Batch processing:  67%|██████▋   | 2/3 [00:02<00:01,  1.17s/it][A
    Batch processing: 100%|██████████| 3/3 [00:03<00:00,  1.12s/it][A
    Processing files: 100%|██████████| 6/6 [00:52<00:00,  8.73s/it]

    Sample of id_to_gene_map:
    Q8IYA8: Q8IYA8
    Q08117: TLE5
    P35244: P35244
    Q06609: RAD51
    Q4VXA5: Q4VXA5
    Q9H079: KATNBL1
    RAD51 found in id_to_gene_map values
    Number of interactions involving RAD51: 255
    Found 131 interacting genes for RAD51
    
    Processing complete. Results:
    BRCA2: 95 interacting genes
    BARD1: 64 interacting genes
    KRAS: 458 interacting genes
    CDH1: 553 interacting genes
    ESR1: 184 interacting genes
    RAD51: 131 interacting genes
    Results saved to Intact_BC_seed_gene_interactionsRESULTSv2.csv


    



```python

```
